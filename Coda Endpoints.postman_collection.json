{
	"info": {
		"_postman_id": "69b63fc5-e26b-439f-b815-a4866faf21ca",
		"name": "Coda Endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26369687",
		"_collection_link": "https://bupadentalcare.postman.co/workspace/Cashing-Up-API~f935fec1-2fde-4f0d-a582-3bd5d1002529/collection/32340218-69b63fc5-e26b-439f-b815-a4866faf21ca?action=share&source=collection_link&creator=26369687"
	},
	"item": [
		{
			"name": "Coda - Get Nominals",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/{{Suffix}}/Coda/Nominal",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"{{Suffix}}",
						"Coda",
						"Nominal"
					]
				}
			},
			"response": []
		},
		{
			"name": "Coda - Get Nominal Amounts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 200', function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"})\r",
							"\r",
							"pm.test('Response has the required fields', function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function (item) {\r",
							"        pm.expect(item).to.include.all.keys('associateCode', 'practiceCode', 'nominalCode', 'amount', 'description');\r",
							"    });\r",
							"})\r",
							"\r",
							"pm.test('NominalCode should be a non-empty string', function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function (item) {\r",
							"        pm.expect(item.nominalCode).to.be.a('string').and.to.have.length.above(0, 'NominalCode should not be empty');\r",
							"    });\r",
							"})\r",
							"\r",
							"pm.test(\"Amount is a number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.amount).to.be.a('number');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/{{Suffix}}/Coda/NominalAmount?companyCode=S002&year=2023&period=1&nominalList=209040&nominalList=209500&nominalList=241103",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"{{Suffix}}",
						"Coda",
						"NominalAmount"
					],
					"query": [
						{
							"key": "companyCode",
							"value": "S002"
						},
						{
							"key": "year",
							"value": "2023"
						},
						{
							"key": "period",
							"value": "1"
						},
						{
							"key": "nominalList",
							"value": "209040"
						},
						{
							"key": "nominalList",
							"value": "209500"
						},
						{
							"key": "nominalList",
							"value": "241103"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Coda - Get Associates by Company",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 5000ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"CompanyCode is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.companyCode).to.be.a('string').and.to.have.lengthOf.at.least(1, \"CompanyCode should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/{{Suffix}}/Coda/Associate?companyCode=A001",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"{{Suffix}}",
						"Coda",
						"Associate"
					],
					"query": [
						{
							"key": "companyCode",
							"value": "A001"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Coda - Get Associate by Code",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/{{Suffix}}/Coda/Associate?companyCode=A001&associateCode=A00364",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"{{Suffix}}",
						"Coda",
						"Associate"
					],
					"query": [
						{
							"key": "companyCode",
							"value": "A001"
						},
						{
							"key": "associateCode",
							"value": "A00364"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Coda - Get Practice Associates by Practice Code",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// These are QA validation tests, Please don't modify them ###\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('practiceCode');\r",
							"        pm.expect(item).to.have.property('staffOrAssociateNo');\r",
							"        pm.expect(item).to.have.property('staffOrAssociateName');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PracticeCode is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.practiceCode).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"StaffOrAssociateNo and staffOrAssociateName are non-empty strings\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.forEach(item => {\r",
							"        pm.expect(item.staffOrAssociateNo).to.be.a('string').and.to.have.lengthOf.at.least(1, \"StaffOrAssociateNo should not be empty\");\r",
							"        pm.expect(item.staffOrAssociateName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"staffOrAssociateName should not be empty\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/{{Suffix}}/Coda/PracticeAssociates?PracticeCode=P0990",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"{{Suffix}}",
						"Coda",
						"PracticeAssociates"
					],
					"query": [
						{
							"key": "companyCode",
							"value": "A001",
							"disabled": true
						},
						{
							"key": "PracticeCode",
							"value": "P0990"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Coda - Get Practice Codes for Company",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/{{Suffix}}/Coda/PracticeCodes?companyCode=A001&practiceCode=C0001",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"{{Suffix}}",
						"Coda",
						"PracticeCodes"
					],
					"query": [
						{
							"key": "companyCode",
							"value": "A001"
						},
						{
							"key": "practiceCode",
							"value": "C0001"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Coda - Get Lab Costs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"InvoiceDate is in a valid date format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.InvoiceDate).to.contains(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Amount is a number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.amount).to.be.a('number');\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/{{Suffix}}/Coda/LabCosts?associateCode=F43264&year=2023&period=1&nominalList=110010&nominalList=110050&nominalList=112010",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"{{Suffix}}",
						"Coda",
						"LabCosts"
					],
					"query": [
						{
							"key": "associateCode",
							"value": "F43264"
						},
						{
							"key": "year",
							"value": "2023"
						},
						{
							"key": "period",
							"value": "1"
						},
						{
							"key": "nominalList",
							"value": "110010"
						},
						{
							"key": "nominalList",
							"value": "110050"
						},
						{
							"key": "nominalList",
							"value": "112010"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Coda - Get Paid Invoices",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields, and they are of correct data types\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.include.all.keys('companyCode', 'element4', 'invoiceValue', 'paymentStatus', 'paymentDate', 'supplierInvoiceRef', 'practiceCode', 'labsOrderRef');\r",
							"        pm.expect(item.companyCode).to.be.a('string');\r",
							"        pm.expect(item.element4).to.be.a('string');\r",
							"        pm.expect(item.invoiceValue).to.be.a('number');\r",
							"        pm.expect(item.paymentStatus).to.be.a('number');\r",
							"        pm.expect(item.paymentDate).to.be.a('string');\r",
							"        pm.expect(item.supplierInvoiceRef).to.be.a('string');\r",
							"        pm.expect(item.practiceCode).to.be.a('string');\r",
							"        pm.expect(item.labsOrderRef).to.be.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/{{Suffix}}/Coda/PaidInvoices?LabsOrderRefList=272-217783&LabsOrderRefList=289-211098&LabsOrderRefList=289-215175",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"{{Suffix}}",
						"Coda",
						"PaidInvoices"
					],
					"query": [
						{
							"key": "LabsOrderRefList",
							"value": "272-217783"
						},
						{
							"key": "LabsOrderRefList",
							"value": "289-211098"
						},
						{
							"key": "LabsOrderRefList",
							"value": "289-215175"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Coda - Check Valid Provider Code",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/{{Suffix}}/Coda/ValidProviderCode?practiceCode=2APSACCRUE&providerCode=400002",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"{{Suffix}}",
						"Coda",
						"ValidProviderCode"
					],
					"query": [
						{
							"key": "practiceCode",
							"value": "2APSACCRUE"
						},
						{
							"key": "providerCode",
							"value": "400002"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Coda - Check Valid Lab Code",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/{{Suffix}}/Coda/ValidLabCode?labCode=4ADEFAULT",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"{{Suffix}}",
						"Coda",
						"ValidLabCode"
					],
					"query": [
						{
							"key": "labCode",
							"value": "4ADEFAULT"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Coda - Check Valid Practice Code",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/{{Suffix}}/Coda/ValidPracticeCode?practiceCode=P0265",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"{{Suffix}}",
						"Coda",
						"ValidPracticeCode"
					],
					"query": [
						{
							"key": "practiceCode",
							"value": "P0265"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Coda - Check Unique Lab Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the Content-Type header set to 'application/json'\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is a boolean value\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is false\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.false;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/{{Suffix}}/Coda/UniqueLabOrder?labCode=L00541&labInvoiceRef=ST153941",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"{{Suffix}}",
						"Coda",
						"UniqueLabOrder"
					],
					"query": [
						{
							"key": "labCode",
							"value": "L00541"
						},
						{
							"key": "labInvoiceRef",
							"value": "ST153941"
						},
						{
							"key": "labInvoiceRef",
							"value": "999999",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "refreshTokenUrl",
				"value": "{{AccessTokenURL}}",
				"type": "string"
			},
			{
				"key": "client_authentication",
				"value": "body",
				"type": "string"
			},
			{
				"key": "scope",
				"value": "api://{{CashingUpApiClientId}}/access_as_user offline_access",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "{{CashingUpApiClientId}}",
				"type": "string"
			},
			{
				"key": "authUrl",
				"value": "{{AuthorizeURL}}",
				"type": "string"
			},
			{
				"key": "redirect_uri",
				"value": "https://oauth.pstmn.io/v1/browser-callback",
				"type": "string"
			},
			{
				"key": "grant_type",
				"value": "implicit",
				"type": "string"
			},
			{
				"key": "tokenName",
				"value": "CashingUpApiToken",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.request.headers.add({\r",
					"    key: 'api-key',\r",
					"    value: pm.environment.get(\"CashingUpApiPostmanApiKey\")\r",
					"});\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}